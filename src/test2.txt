import React, { useRef, useState, useEffect, useContext } from 'react';
import { Link } from 'react-router-dom';

import Container from '../../components/Container';

/** Utils */
import { LoginPageBg } from '../../utils/media-files';
import { EMAIL_REGEX, EMAIL_ERROR_MESSAGE, PWD_REGEX, PWD_ERROR_MESSAGE } from '../../utils/regex';

/** Fonts */
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faEye, faEyeSlash, faCheck, faTimes, faInfoCircle } from '@fortawesome/free-solid-svg-icons';

/** Form Items */
import Form from '../../components/form/Form';
import ItemBlock from '../../components/form/ItemBlock';
import Button from '../../components/form/Button';

import AuthContext from '../../context/AuthContext';

const Login = () => {
  const userRef = useRef();
  const errRef = useRef();

  const [credentials, setCredentials] = useState({ password: '', username: '' }); 
  
  /** For REGEX */
  const [validName, setValidName] = useState(false);
  const [userFocus, setUserFocus] = useState(false);

  const [validPwd, setValidPwd] = useState(false);
  const [pwdFocus, setPwdFocus] = useState(false);
  
  const [errMsg, setErrMsg] = useState('');
  const [success, setSuccess] = useState(false);
  
  /** Icons visibility */
  const [passwordVisibility, setPasswordVisibility] = useState(false);

  /** Use Context data */
  const { loginCurrentUser } = useContext(AuthContext);
  
  /** Set the user input on focus after component load */
  useEffect(()=> {
    userRef.current.focus();
  }, []);

  
  /** Check userName & Password validation */
  useEffect(()=> {
    console.log(credentials)
    setValidName(EMAIL_REGEX.test(credentials.username));
  }, [credentials]);

  useEffect(()=> {
    setValidPwd(PWD_REGEX.test(credentials.password));
  }, [credentials]);

  useEffect(()=> {
    setErrMsg('');
  }, [credentials.username, credentials.password]);

  /** States of form content */
  const submitHandler = (e) => {
    e.preventDefault();

    loginCurrentUser(credentials);
  }

  /** Password's icon visibility */
  const togglePasswordVisibility = () => {
    setPasswordVisibility(!passwordVisibility);
  };
  const eye = <FontAwesomeIcon icon = { passwordVisibility ? faEyeSlash : faEye } />;
  
  console.log(passwordVisibility)
  return (
    <Container className='login-page'>

      <div className='login-page__back-image'>
        <img src={ LoginPageBg } alt='Login Page' />
      </div>

      <div className='login-page__form'>
        <h2>Login</h2>
        <p>Sign in to your account to continue.</p>

        <p ref={errRef} className={ errMsg ? 'error-message' : 'offscreen'} aria-live='assertive'> 
          { errMsg } 
        </p>
        
        <Form onSubmit = { submitHandler }>
          <ItemBlock
            type='email'
            className='row' 
            ref={userRef}
            autoComplete='off'
            placeholder='* E-Mail'
            name='username'
            required
            autoFocus
            value= { credentials.username }
            aria-invalid= { validName ? 'false' : 'true' }
            aria-describedby='uidnote'
            onFocus={ () => setUserFocus(true) }
            onBlur={ () => setUserFocus(false) }
            onChange={ e => setCredentials({...credentials, username: e.target.value}) }
          />
          <p id='uidnote' className={userFocus && credentials.username && !validName ? 'instructions' : 'offscreen'}>
            <FontAwesomeIcon icon={faInfoCircle} />{EMAIL_ERROR_MESSAGE}
          </p>

          <ItemBlock 
            type = { passwordVisibility ? 'text' : 'password' }
            className = 'row'
            placeholder = '* Password'
            name = 'password'
            required
            value = { credentials.password }
            aria-invalid= { validPwd ? 'false' : 'true' }
            aria-describedly='pwdnote'
            onChange = { e => setCredentials({...credentials, password: e.target.value}) }
            onFocus={ () => setPwdFocus(true) }
            onBlur={ () => setPwdFocus(false) }
            onIconClick = { togglePasswordVisibility }
            icon = { eye }
          />
          <p id='pwdnote' className={ pwdFocus && !validPwd ? 'instructions' : 'offscreen' }>
            <FontAwesomeIcon icon={faInfoCircle} />{PWD_ERROR_MESSAGE} 
          </p>

          <div>
            <Link to='/forgot-password'> Forgot your password? </Link>
            <p>Not registered? <Link to='/signup'> Create account </Link></p>
          </div>
          
          <Button type = 'submit' >Login</Button>
        </Form>
      </div>
     
      

    </Container>
  )
}

export default Login;